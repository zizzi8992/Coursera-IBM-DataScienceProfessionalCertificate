Simple APIs (Part 1)

In this video we will discuss Application Program Interfaces API for short. Specifically, we will discuss: What is an API API Libraries REST API, including: Request and Response An Example with PyCoinGecko An API lets two pieces of software talk to each other For example you have your program, you have some data, you have other software components. You use the api to communicate with the api via inputs and outputs. Just like a function, you don’t have to know how the API works, but just its inputs and outputs. Pandas is actually a set of software components, much of which are not even written in Python. You have some data. You have a set of software components. We use the pandas api to process the data by communicating with the other Software Components. Let’s clean up the diagram. When you create a dictionary, and then create a pandas object with the Dataframe constructor, in API lingo, this is an “instance.” The data in the dictionary is passed along to the pandas API. You then use the dataframe to communicate with the API. When you call the method head, the dataframe communicates with the API displaying the first few rows of the dataframe. When you call the method mean the API will calculate the mean and return the values.

REST APIs are another popular type of API; they allow you to communicate through the internet allowing you to take advantage of resources like storage, access more data, artificial intelligent algorithms, and much more. The RE stands for Representational, the S stands for State, the T stand for Transfer. In rest API’s your program is called the client. The API communicates with a web service you call through the internet. There is a set of rules regarding Communication, Input or Request, and Output or Response. Here are some common terms. You or your code can be thought of as a client. The web service is referred to as a resource. The client finds the service via an endpoint. We will review this more in the next section. The client sends requests to the resource and the the resource (web service) sends a response to the client. HTTP methods are a way of transmitting data over the internet We tell the Rest API’s what to do by sending a request. The request is usually communicated via an HTTP message. The HTTP message usually contains a JSON file. This contains instructions for what operation we would like the service to perform. This operation is transmitted to the webservice via the internet. The service performs the operation. In the similar manner, the webservice returns a response via an HTTP message, where the information is usually returned via a JSON file. This information is transmitted back to the client. Crypto Currency data is excellent to be used in an API because it is being constantly updated and it is vital to CryptoCurrency Trading We will use the Py-Coin-Gecko Python Client/Wrapper for the Coin Gecko API, updated every minute by Coin-Gecko We use the Wrapper/Client because it is easy to use so you can focus on the task of collecting data, we will also introduce pandas time series functions for dealing with time series data Using Py-Coin-Gecko to collect data is quite simple All we need is to install and import the library Create a client object And finally use a function to request our data. In this function we are getting data on bitcoin, in U.S. Dollars, for the past 30 days. In this case our response is a JSON expressed as a python dictionary of nested lists including price, market cap, and total volumes which contain the unix timestamp and the price at that time. We are only interested in price so that is what we will select using the key price To make things simple, we can convert our nested list to a DataFrame, with the columns time stamp and price its difficult to understand the column time stamp we Will convert it to a more readable format using the pandas Function to_datetime

Using the to datetime function, we create readable time data, the input is the time stamp column unit of time is set to milliseconds We append the output to the new column date. We. Would like to create a candle stick plot To get the data for the daily candlesticks we will group by the date to find the minimum, maximum, first, and last price of each day Finally we will use plotly to create the candlestick chart and plot it Now we can view the candlestick chart by opening the html file and clicking trust HTML in the top left of the tab It should look something like this.

Simple APIs (Part 2)

In this video, we will discuss Application Program Interfaces that use some kind of artificial intelligence. We will transcribe an audio file using the Watson Text to Speech API. We will then translate the text to a new language using the Watson Language Translator API. In the API call, you will send a copy of the audio file to the API. This is sometimes called a POST request. Then the API will send the text transcription of what the individual is saying. Under the hood, the API is making a GET request. We then send the text we would like to translate into a second language to a second API. The API will translate the text and send the translation back to you. In this case, we translate English to Spanish. We then provide an overview of API keys and endpoints, Watson Speech to Text, and Watson Translate. First, we will review API keys and endpoints. They will give you access to the API. An API key as a way to access the API. It's a unique set of characters that the API uses to identify you and authorize you. Usually, your first call to the API includes the API key. This will allow you access to the API. In many APIs, you may get charged for each call. So like your password, you should keep your API key a secret. An endpoint is simply the location of the service. It's used to find the API on the Internet just like a web address. Now, we will transcribe an audio file using the Watson Text to Speech API. Before you start the lab, you should sign up for an API key. We will download an audio file into your directory. First, we import SpeechToTextV1 from IBM Watson. The service endpoint is based on the location of the service instance. We store the information in the variable url_s2t. To find out which URL to use, view the service credentials. You will do the same for your API key. You create a speech-to-text adapter object. The parameters are the endpoint and API key. You will use this object to communicate with the Watson Speech to Text service. We have the path of the wav file we would like to convert to text. We create the file object wav with the wav file using open. We set the mode to rb, which means to read the file in binary format. The file object allows us access to the wav file that contains the audio. We use the method recognize from the speech to text adapter object. This basically sends the audio file to Watson Speech to Text service. The parameter audio is the file object. The content type is the audio file format. The service sends a response stored in the object response. The attribute result contains a python dictionary. The key results value has a list that contains a dictionary. We are interested in the key transcript. We can assign it to the variable recognized_text as follows. Recognized_text now contains a string with a transcribed text. Now let's see how to translate the text using the Watson Language Translator. First, we import LanguageTranslatorV3 from ibm_watson. We assign the service endpoint to the variable url_lt. You can obtain the service in the lab instructions. You require an API key, see the lab instructions on how to obtain the API key. This API request requires the date of the version, see the documentation. We create a language translator object, LanguageTranslator. We can get a list of the languages that the service can identify as follows. The method returns the language code. For example, English has a symbol en to Spanish, which has the symbol es. In the last section, we assigned the transcribed texts to the variable to recognized_text. We can use the method translate. This will translate the text. The result is a detailed response object. The parameter text is the text. model_id is the type of model we would like to use. In this case, we set it to en-es for English to Spanish. We use the method get result to get the translated text and assign it to the variable translation. The result is a dictionary that includes the translation word count and character count. We can obtain the translation and assign it to the variable spanish_translation as follows. Using the variable spanish_translation, we can translate the text back to English as follows. The result is a dictionary. We can obtain the string with the text as follows. We can then translate the text to French as follows. Thanks for watching this video. 

