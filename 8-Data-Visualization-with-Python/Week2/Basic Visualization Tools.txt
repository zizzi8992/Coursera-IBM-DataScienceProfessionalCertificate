Area Plots

Welcome to Area Plots. After watching this video, you'll be able to: describe what is an area plot, explain how to create an area plot using Matplotlib. What is an area plot? An area plot, also known as an area chart or graph, displays the magnitude and proportion of multiple variables over a continuous axis, typically representing time or another ordered dimension. It's similar to a line plot, but with the area below the line filled with color to emphasize the cumulative magnitude of the variables. This kind of graph is commonly used when trying to compare two or more quantities. Let's learn how to generate an area plot with Matplotlib. Before we go over the code on how to generate an area plot, let's do a quick recap of our dataset. Recall that each row represents a country and contains metadata about the country, such as it's geographic location and its development status. Each row also contains numerical data of annual immigration from that country to Canada from 1980 - 2013. Now let's process the dataframe so that the country name becomes the index of each row. This should make retrieving rows pertaining to specific countries a lot easier. Also, let's add an extra column that represents the cumulative sum of annual immigration from each country from 1980 - 2013. For Afghanistan, it's 58,639 total. For Albania, it's 15,699, and so on. Let's name our dataframe df_canada. Now that we know how we have stored our data in the dataframe df_canada. Let's try to generate area plots for the countries with the highest immigration to Canada. We can try to find these countries by sorting our dataframe in descending order of cumulative total immigration 1980-2013. We use the sort_values function to sort our dataframe in descending order. Here is the result. It turns out that India followed by China, then the United Kingdom, the Philippines, and Pakistan, are the top five countries with the highest immigration to Canada. Can we now go ahead and generate the area plots using the first five rows of this dataframe? Not quite yet. First, we need to create a new dataframe of these five countries only and exclude the total column. More importantly, to generate the area plots for these countries, we should plot the years on the horizontal axis and the annual immigration on the vertical axis. Note that Matplotlib plots the indices of a dataframe on the horizontal axis and with the dataframe as shown, Matplotlib plots the countries on the horizontal axis. To fix this, we need to take the transpose of the dataframe. Let's see how we can do this. After we sort our dataframe in descending order of cumulative annual immigration, we create a new dataframe of the top five countries, and we call it ‘df_top5’. We then select only the columns representing the years 1980 - 2013 in order to exclude the total column before applying the transpose method. The resulting dataframe is exactly what we want with five columns, where each column represents one of the top five countries and the years being the indices. Now we can go ahead and use the plot function on dataframe, df_top five to generate the area plots. First, we import Matplotlib as MPL and it's scripting interface as PLT. Then we call the plot function on the dataframe df_top5, and we set kind=area to generate an area plot. Then to complete the figure, we give it a title and label both the axes appropriately. Finally, we then use the show function to display the figure. Note that here we are generating the area plot using the inline backend, and there you have it. An area plot that depicts the immigration trend of the five countries with the highest immigration to Canada, 1980-2013. Area plots are particularly effective and depicting data with a cumulative nature, such as tracking stock market performance, visualizing population demographics, or displaying the distribution of resources across various sectors. In this video, you learned that: an area plot depicts cumulated totals using numbers or percentages over time. The process of creating an area plot involves importing Matplotlib and calling the plot function on the dataframe with kind parameter assigned as area. Area plots provide a visually appealing and intuitive way to showcase the relationship and proportion of multiple variables in a single chart.

Histograms

Welcome to Histograms. After watching this video, you'll be able to: define a histogram with the help of an illustration, explore the process of creating a histogram using Matplotlib, let's start by defining what a histogram is. A histogram is a way of representing the frequency distribution of a numeric data set. The way it works is that it partitions the spread of the numeric data into bins, assigns each data point in the data set to a bin, and then counts the number of data points assigned to each bin. So, the vertical axis is essentially the frequency or the number of data points in each bin. For example, let's say the range of the numeric values in the data set is 34,129. Now, the first step in creating a histogram is partitioning the horizontal axis in, say, 10 bins of equal width. Then we construct the histogram by counting how many data points have a value that is between the limits of the first bin, the second bin, the third bin, and so on. Say, the number of data points that have a value between 0 and 3,413 is 175, then we draw a bar of that height for this bin, we repeat the same step for all the other bins. And if no data points fall into a bin, then that bin would have a bar of height zero. So how do we create a histogram using Matplotlib? Let's process the data frame so that the country name becomes the index of each row, this should make retrieving rows pertaining to specific countries a lot easier. Also, let's add an extra column that represents the cumulative sum of annual immigration from each country from 1980 to 2013, so for Afghanistan it's 58,639 total, and for Albania it's 15,699, and so on. And let's name our data frame df_canada. Considering the Canada immigration data set, having countries as the index, and having another column as total represents the cumulative sum of annual immigration from each country from 1980 to 2013. Say we want to visualize the distribution of immigrants to Canada in the year 2013, the simplest way to do that is to generate a histogram of the data in column 2013. Let's see how we can do that with Matplotlib, first, we import Matplotlib as mpl and its scripting interface as plt. Then we call the plot function on the data in column 2013 and we specify kind=hist to generate a histogram, then, to complete the figure, we give it a title and label both its axes. Finally, we use the show function to display the figure, and there you have it: a histogram that depicts the distribution of immigration to Canada in 2013. But notice how the bins are not aligned with the tick marks on the horizontal axis, this can make the histogram hard to read. So, let's try to fix this in order to make our histogram more effective. One way to solve this issue is to borrow the histogram function from the NumPy library, so as usual, we start by importing Matplotlib and its scripting interface, but this time we also import the NumPy library, then we call the NumPy histogram function on the data in column 2013. This function is going to partition the spread of the data in column 2013 in ten bins of equal width, where ten is the default number of bins. It also computes the number of data points that fall in each bin and then return this frequency of each bin which we are calling ‘count’ here, and the bin edges which we will call ‘bin_ edges’. We then pass these bin edges as an additional parameter in our plot function to generate the histogram, and there you go. A precisely generated histogram with the bin edges and tick marks clearly aligned on the horizontal axis. In this video you learned that: a histogram is a way of representing the frequency distribution of a numeric data set. To generate a histogram on Matplotlib, you import Matplotlib as mpl and its scripting interface is plt. You can call the plot function on the data frame with kind parameter assigned as hist. You can use the NumPy library to create bins for the histogram representation.

Bar Charts

Welcome to Bar Charts. After watching this video, you'll be able to: describe a bar chart with the help of an illustration, explore the process of creating a bar chart using Matplotlib. A bar chart is a popular visualization tool. Unlike a histogram, a bar chart, also known as a bar graph, is a type of plot where the length of each bar is proportional to the value of the item that it represents. It's commonly used to compare the values of a variable at a given point in time. For example, say we want to visualize in a discrete fashion, how immigration from Iceland to Canada looked 1980-2013. One to do that is by building a bar chart where the height of the bar represents the total immigration from Iceland to Canada in a particular year. How do we do that with Matplotlib? From our dataset on immigration to Canada, we created a dataframe called df_canada. Having country names as the index of each row and a column total represents the cumulative sum of annual immigration from each country 1980-2013. Let's see how we can use Matplotlib to generate a bar chart to visualize what immigration from Iceland to Canada looked like 1980-2013. As usual, we start by importing Matplotlib and it's scripting interface. Then we use the years variable to create a new dataframe. Let's name it df_iceland, which includes the data pertaining to annual immigration from Iceland to Canada, and excluding the total column. Then we use the plot function on df_iceland, and we set kind=bar to generate a bar chart. To complete the figure, we give it a title and label both of its axes. Finally, we use the show function to display the figure. There you have it. A bar chart depicts immigration from Iceland to Canada 1980-2013. By examining the bar chart, we noticed that immigration to Canada from Iceland has seen an increasing trend since 2010. I'm sure the curious among you are already wondering who the culprit behind this increasing trend is. You can also create a bar chart with horizontal bars by assigning bar to the kind parameter of the plot function. Note the use of the color parameter as you can change the color of the bar with this. Let's suppose you want to highlight the years with highest and lowest number of Icelandic immigrants to Canada between the year 1980 to 1990. You can pass a list of colors to the color parameter accordingly. Here we have highlighted the bars for the years 1981 and 1990 with the color red. By assigning the color of your choice to the edge color parameter, you can change the borderline color of each bar. In this video, you learned that: a bar chart is a type of plot where the length of each bar is proportional to the value of the item that it represents. You can create a bar chart using Matplotlib representing the total immigration from Iceland to Canada.


