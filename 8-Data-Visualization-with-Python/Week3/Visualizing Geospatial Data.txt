Introduction to Folium

Welcome to an introduction to Folium. After watching this video, you'll be able to: describe Folium and its features, explain what Folium is used for. Folium is a powerful data visualization library in Python that was built primarily to help people visualize geospatial data. With Folium, you can create a map of any location in the world using latitude and longitude values. You can also create a map and superimpose markers and clusters on top of the map for interesting visualizations, you can also create maps of different styles, such as street level maps, stamen maps, and a couple of others, which we will look into in just a moment. Creating a world map with Folium is straightforward. First, you need to import Folium and then you call the map function. That is all. What's interesting about the maps created by Folium is that they are interactive, so you can zoom in and out after the map is rendered, which is a helpful feature. The default map style is open street map, which shows a straight view of an area when you are zoomed in and shows the borders of the world countries when you are zoomed out all the way. Now, let's create a world map centered around Canada. To do that, we pass in Canada's latitude and longitude values using the location parameter. With Folium, you can set the initial zoom level using the zoom_start parameter. Use initial because you can easily change the zoom level after the map is rendered by zooming in or out, you can play with this parameter to determine the initial zoom level for different values. Let's set the zoom level for our map of Canada to four. The result will be a world map centered around Canada. Another feature of Folium is that you can create different map styles using the tiles parameter. Let's create a stamen toner map of Canada. This style is great for visualizing and exploring river meanders and coastal zones. Another style is stamen terrain. Let's create a map of Canada in stamen terrain. This style is excellent for visualizing hill shading and natural vegetation colors. In this video, you learned that Folium is a data visualization library in Python that helps people visualize geospatial data. With Folium, you can create maps of different styles, such as street level maps, stamen maps, and more. A feature of Folium is that you can create different map styles using the tiles parameter.

Maps with Markers

Welcome to Maps with Markers. After watching this video, you'll be able to explain how Folium can add markers to a map, and describe how to generate markers. With Folium you can easily add markers on the map. Let's first render a world map centered around Canada. First, import Folium, then create the map object. Remember that the location parameter specifies the latitude and longitude coordinates of the center point of the map. The zoom_start sets the initial zoom level of the map. In this case, zoom_start = 4 provides a zoomed out view of Canada. You can display it by simply calling canada_map. Markers play a vital role in enhancing interactivity and adding context to maps. They represent specific locations or points of interest, providing additional information when clicked. Markers are like signposts that guide us through the map, highlighting important elements. Ontario is a Canadian province that contains about 40% of the Canadian population. It is considered Canada's most populous province. Let's add a marker for Ontario province, one of the largest provinces in Canada to our map. Using the folium.Marker function, we specify the location parameter as 51.2538, -85.3232, representing the approximate coordinates for Ontario. Additionally, we set the pop-up parameter as Ontario to provide a label when the marker is clicked. The add_to (canada_map) method is called on the folium.Marker object to add the marker for Ontario to the canada_map. This ensures that the marker is included as part of the map’s layers and will be displayed when the canada_map is rendered or saved. Alternatively, we can create the marker using FeatureGroup. Let's go ahead and create a feature group named Ontario. Now, when a feature group is created, it is empty, so what's next is to start creating what is called children and adding them to the feature group. Let's create a child in the form of a red circular mark located at the center of the Ontario province. We specify the location of the child by passing in its latitude and longitude values. Once we're done adding children to the feature group, we add the feature group to the map. The result is a red circular mark superimposed on top of the map and added to the center of the province of Ontario. Now, it would be helpful if we could label this marker in order to let other people know what it represents. To do that, we use the marker function and the pop-up parameter to pass in the text we want to add to this marker. The result is our marker displays Ontario when clicked on. In the lab session, we will view a real-world example and explore the crime rate in San Francisco. We’ll create a map of San Francisco and superimposed thousands of these markers on top of the map. Also, how you can generate marker clusters to make your map look less congested. This module's lab session is interesting, so ensure you complete it. Displaying multiple markers on a map is essential when using larger maps. Suppose you want to show multiple markers on the map. How can you do that? It's simple. Create a list of all the locations, then pass this list to the marker function, adding an underscore to function through a loop and your map with multiple markers will be ready for display. When creating code to display multiple markers on a map, you can call the MarkerCluster object add an underscore to the function and pass your map here. It's the same as creating a list of locations. Then pass this list to the marker function through the loop. But this time, instead of map, use marker_cluster to add the underscore to functions and your map with multiple markers will be displayed. The markers within the marker_cluster will be intelligently grouped based on their proximity when the map is displayed. This clustering feature enhances the visual presentation by preventing overcrowding and ensuring a clear representation, primarily when numerous markers are close. In this video, you learned that with Folium, you can easily add markers on maps. The location parameter specifies the latitude and longitude coordinates of the center point of the map. Markers play a vital role in enhancing interactivity and adding context to maps. The folium.Marker function specifies location parameters. The pop-up parameter provides a label upon being clicked. Markers can be created using feature group.

Choropleth Maps

Welcome to Choropleth Maps. After watching this video, you'll be able to: describe choropleth maps, explain what are the uses for choropleth maps. Most of you have seen maps like this. These are what we call choropleth maps. So what is a choropleth map? A choropleth map is a thematic map in which areas are shaded or patterned in proportion to the measurement of the statistical variable displayed on the map. Such as population density or per capita income. The higher the measurement, the darker the color. So the map to the left is a choropleth world map showing the infant mortality rate per 1000 births. The darker the color, the higher the infant mortality rate. According to the map, African countries have very high infant mortality rates, with some reporting a rate higher than 160 per 1000 births. Similarly, the map on the right is a choropleth map of the US showing population per square mile by state. Again, the darker the color, the higher the population. According to the map, states in the eastern part of the US tend to be more populous than states in the western part, with California being an exception. Folium is a Python library used for creating interactive maps and visualizations. It provides a simple and intuitive way to generate maps using data from various sources, including GeoJSON, Pandas DataFrames, and NumPy arrays. To create a choropleth map of a region of interest, folium requires a GeoJSON file that includes geospatial data of the region. For a choropleth map of the world, we would need a GeoJSON file that lists each country and any geospatial data to define its borders and boundaries. Here's an example of what a GeoJSON file would include about each country. The example here pertains to the country Brunei. As you can see, the file consists of its name, ID, geometry, shape, and coordinates that define its borders and boundaries. So let's see how we can create a choropleth map of the world showing immigration to Canada. Before creating the map's code, let's quickly recap our data set. Recall that each row represents a country and contains metadata about it, such as where it is located geographically and whether it's developing or developed. Each row also contains numerical figures for annual immigration from that country to Canada from 1980 to 2013, and let's name our data frame df_canada. So now that we know our data is stored in the data frame df_ canada, let's see how we can generate a choropleth map of the world showing immigration to Canada. We should be experts now in creating world maps with Folium. So let's go ahead and create a world map. But this time, let's use the Mapbox Bright Tileset. The result is a nice world map displaying the name of every country. Now, let's convert this map into a choropleth map. We first define a variable that points to our JSON file. Then we apply the choropleth function to our world map. We tell it to use the country total columns in our df_canada data frame and the country names to look up the geospatial information about each country in the GeoJSON file. The result will be a choropleth map of Canada showing the intensity of immigration from different countries worldwide. We explore choropleth maps in more detail in the lab session, so be sure to complete this module's lab session. In this video, you learned that a choropleth map is a thematic map in which areas are shaded or patterned in proportion to the measurement of the statistical variable. When creating a choropleth map, Folium requires a GeoJSON file that includes geospatial data of the region. The Mapbox Bright Tileset displays the name of every country when used on a map. 

Summary: Advanced Visualizations and Geospatial Data
Congratulations! You have completed this module. At this point in the course, you know: 

Folium is a data visualization library in Python that helps people visualize geospatial data. 

With Folium, you can create maps of different styles, such as street-level maps, stamen maps, and more. 

A feature of Folium is that you can create different map styles using the tiles parameter.

With Folium, you can easily add markers on maps.

The ‘location’ parameter specifies the latitude and longitude coordinates of the center point of the map.

Markers play a vital role in enhancing interactivity and adding context to maps.

The folium.Marker() function specifies location parameters.

The popup parameter provides a label upon being clicked.

Markers can be created using “feature group.”

A choropleth map is a thematic map in which areas are shaded or patterned in proportion to the measurement of the statistical variable.

When creating a choropleth map, Folium requires a GeoJson file that includes geospatial data of the region.

The Mapbox Bright Tileset displays the name of every country when used on a map.