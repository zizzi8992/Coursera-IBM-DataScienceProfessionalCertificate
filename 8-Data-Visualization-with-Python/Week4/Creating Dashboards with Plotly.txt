Dashboarding Overview

Welcome to Dashboarding Overview. After watching this video, you'll be able to explore the benefits of using interactive data applications to improve business performance, and identify different web-based dashboarding tools available in Python. With real-time visuals on the dashboard, understanding business moving parts becomes easy. Based on the report type and data, suitable graphs and charts can be created in one central location. This provides an easy way for stakeholders to understand what is going right or wrong and what improvements are necessary. Also, getting the big picture in one place can help businesses make informed decisions which can improve performance. In general, the best dashboards answer critical business questions. Let's say you're assigned a task to monitor and report the performance of domestic US flights. Following are the yearly review report items: top 10 airline carriers in the year 2019 in terms of the number of flights, number of flights in 2019, split by month, number of travelers from California state to other states split by distance group. Let's look at two ways of presenting the report. Type 1, the report is presented through tables with inference from tables documented for reference. Type 2, here, we are presenting the same report in the dashboard format. As you can see, hovering over each chart will provide details about the data points. At the bottom in the sunburst chart, you can click on different numbers, drill down into levels, and get detailed information about each segment. Can you observe the difference in the presentation of the findings? What if we need to get the report on real-time data, not static data? Also presenting the result using tables and documents is time-consuming, less visually appealing, and hard to comprehend. A data scientist should have the ability to create and deliver a story around the finding in a way stakeholders can easily understand. With that in mind, dashboards are the way to go. Let's take a look at web-based dashboarding tool options available in Python. Dash is a Python framework for building web analytic applications. It runs on top of flask plotly.js and react.js. Dash is well suited for building data visualization apps with highly customized user interfaces. Panel works with visualizations from Bokeh, Matplotlib, HoloViews, and many other Python plotting libraries, making them instantly viewable, either individually or when combined with interactive widgets that control them. Panel works equally well in Jupyter Notebooks for creating quick data exploration tools or as a standalone deployed app in dashboards and allows you to easily switch between those contexts as needed. Voila turns Jupyter notebooks into standalone web applications. It's compatible with separate layout tools like Jupyter-flex or templates like voila-vuetify. Streamlit can easily turn data scripts into shareable web apps with three main principles: embrace Python scripting, treat widgets as variables, and reuse data and computation. There are other tools that can be used for dashboarding. Bokeh is a plotting library, widget, and app library. It acts as a server for both plots and dashboards. Panel, which is one of the web-based dashboarding tools, is built on Bokeh. Ipywidgets provides a wide array of Jupyter compatible widgets and an interface supported by many Python libraries. But sharing as a dashboard requires a separate deployable server like voila. Matplotlib is a comprehensive library for creating static, animated, and interactive visualizations in Python. Bowtie allows users to build dashboards in pure Python. Flask is a Python-backed web server that builds arbitrary websites, including those with Python plots that then function as Flask dashboards. In this video, you learned that dashboard simplifies the dynamic aspect of the business. Data can be presented by using different types of dashboards. There are different types of dashboarding tools.

Introduction to Plotly

Welcome to Introduction to Plotly. After watching this video, you'll be able to explore Plotly and it's two sub-modules, discover how to use Plotly graph objects and Plotly express to create customized and interactive charts. What is Plotly? Plotly is an interactive, open-source plotting library that supports over 40 unique chart types. It's available in Python and JavaScript. Plotly Python is an extension of Plotly JavaScript Library and includes chart types like statistical, financial, maps, scientific, and three-dimensional data. The web-based visualizations created using Plotly Python can be displayed in Jupiter Notebook, saved to standalone HTML files, or served as part of pure Python build web applications using dash. Here, we'll be focusing on the two sub-modules of Plotly; Plotly Graph Objects and Plotly Express. Plotly Graph Objects is the low-level interface to figures, traces and layout. The Plotly Graph Objects module provides an automatically generated hierarchy of classes, figures, traces, and layout called graph objects that are used for representing figures with a top-level class Plotly.graph_objects.Figure. Plotly Express is a high level wrapper for Plotly. It's a recommended starting point for creating the most common figures provided by Plotly. Because if it's simple syntax, it uses graph objects internally. Let's see how to use plotly.graph_objects submodule with a simple line chart creation example. First, import the required packages. Here we're importing graph objects as go. By writing the code, import plotly.graph_objects as go. Then we're importing Plotly Express with import plotly.express as px command. Lastly, we need numpy to generate sample data. We're importing numpy, import numpy as np, then generate sample data with np.random.seed(10). We're setting random seed for reproducibility. Now let's create an array of 12 elements; x=np.arrange(12). Let's create random y values by using random module y=np.random.randint (50, 500, size=12). The plotly.graph contains the JSON object, which has a dictionary structure. Since we imported Plotly Graph Objects as go in the previous slide, go will be the JSON object. The chart can be plotted by updating the values of the go object keywords. We create the figure by adding a trace which is called Scatter, here. Let's view the code; fig = go.Figure( data=go.Scatter( x=x, y=y)). Next, the layout of the figure is updated using the update layout method. Here we are updating the x-axis, y-axis, and chart title. Let us view the code;
fig.update_layout( title= 'Simple Line Plot', xaxis_title= 'Month', yaxis_title= 'Sales'). Then fig.show method is called to display the created plot. This is the plotted figure. Now we will create the same line chart using Plotly Express. As you can see in the example, the entire line chart can be created using a single command. Let's view the code; hashtag, entire line chart can be created in a single command; fig=px.line( x=x, y=y, title= 'Simple Line Plot', labels=dict, (x= 'Month', y= 'Sales') fig.show(). Visualization is automatically interactive. Plotly Express makes visualization easy to create and modify. It's time to play with the Plotly library. We'll use the airline reporting dataset from the data asset exchange to demonstrate how to use Plotly Graph Objects and express to create charts. Here's a quick overview of the airline reporting dataset. The reporting carrier on-time performance dataset contains information on approximately 200 million domestic US flights reported to the United States Bureau of Transportation Statistics. The dataset contains basic information about each flight, such as date, time, departure airport, and arrival airport, and if applicable, the length of time the flight was delayed and information about the reason for the delay. In this video, you learned that Plotly is an interactive open-source plotting library that supports over 40 unique chart types. Plotly graph objects is the low-level interface to figures, traces, and layout. Plotly Express is a high-level wrapper for Plotly. It uses graph objects internally.


