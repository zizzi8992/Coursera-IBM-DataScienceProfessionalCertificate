Using String Patterns and Ranges

Hello, and welcome to retrieving data with SELECT statements string patterns. In this video, we will learn about some advanced techniques in retrieving data from a relational database table. At the end of this lesson, you will be able to describe how to simplify a SELECT statement by using string patterns, ranges or sets of values. The main purpose of a database management system is not just to store the data, but also facilitate retrieval of the data. In its simplest form, a SELECT statement is select star from table name. Based on a simplified library database model and the table Book, SELECT star from Book gives a result set of four rows. All the data rows for all columns in the table Book are displayed or you can retrieve a subset of columns for example, just two columns from the table book such as Book_ID and Title. Or you can restrict the result set by using the WHERE clause. For example, you can select the title of the book whose Book_ID is B1. But what if we don't know exactly what value to specify in the WHERE clause? The WHERE clause always requires a predicate, which is a condition that evaluates to true, false or unknown. But what if we don't know exactly what value the predicate is? For example, what if we can't remember the name of the author, but we remember that their first name starts with R? In a relational database, we can use string patterns to search data rows that match this condition. Let's look at some examples of using string patterns. If we can't remember the name of the author, but we remember that their name starts with R, we use the WHERE clause with the like predicate. The like predicate is used in a WHERE clause to search for a pattern in a column. The percent sign is used to define missing letters. The percent sign can be placed before the pattern, after the pattern, or both before and after the pattern. In this example, we use the percent sign after the pattern, which is the letter R. The percent sign is called a wildcard character. A wildcard character is used to substitute other characters. So, if we can't remember the name of the author, but we can remember that their first name starts with the letter R, we add the like predicate to the WHERE clause. For example, select first name from author, where firstname like 'R%'. This will return all rows in the author table whose author's first name starts with the letter R. And here is the result set. Two rows a return for authors Raul and Rav. What if we wanted to retrieve the list of books whose number of pages is more than 290, but less than 300. We could write the SELECT statement like this, specifying the WHERE clause as, where pages is greater than or equal to 290, and pages is less than or equal to 300. But in a relational database, we can use a range of numbers to specify the same condition. Instead of using the comparison operators greater than or equal to, we use the comparison operator 'between and.' 'Between and' compares two values. The values in the range are inclusive. In this case,we rewrite the query to specify the WHERE clause as where pages between 290 and 300. The result set is the same, but the SELECT statement is easier and quicker to write. In some cases, there are data values that cannot be grouped under ranges. For example, if we want to know which countries the authors are from. If we wanted to retrieve authors from Australia or Brazil, we could write the SELECT statement with the WHERE clause repeating the two country values. However, what if we want to retrieve authors from Canada, India, and China? The WHERE clause would become very long repeatedly listing the required country conditions. Instead, we can use the IN operator. The IN operator allows us to specify a set of values in a WHERE clause. This operator takes a list of expressions to compare against. In this case the countries Australia or Brazil. Now you can describe how to simplify a SELECT statement by using string patterns, ranges, or sets of values. Thanks for watching this video. 

Sorting Result Sets

Hello, and welcome to sorting SELECT statement results sets. In this video, we will learn about some advanced techniques in retrieving data from a relational database table and sorting how the result set displays. At the end of this lesson, you will be able to describe how to sort the result set by either ascending or descending order and explain how to indicate which column to use for the sorting order. The main purpose of a database management system is not just to store the data, but also facilitate retrieval of the data. In its simplest form, a select statement is select * from table name. Based on our simplified library database model, in the table book, select * from book gives a result set of four rows. All the data rows for all columns in the table book are displayed. We can choose to list the book titles only as shown in this example, select title from book. However, the order does not seem to be in any order. Displaying the results set in alphabetical order would make the result set more convenient. To do this, we use the "order by" clause. To display the result set in alphabetical order, we add the order by clause to the select statement. The order by clause is used in a query to sort the result set by a specified column. In this example, we have used order by on the column title to sort the result set. By default, the result set is sorted in ascending order. In this example, the result set is sorted in alphabetical order by book title. To sort in descending order, use the key word" desc." The result set is now sorted according to the column specified, which is title, and is sorted in descending order. Notice the order of the first three rows. The first three words of the title are the same, so the sorting starts from the point where the characters differ. Another way of specifying the sort column is to indicate the column sequence number. In this example, select title, pages from book order by two, indicates the column sequence number in the query for the sorting order. Instead of specifying the column name pages, the number two is used. In the select statement, the second column specified in the column list is pages, so the sort order is based on the values in the pages column. In this case, the pages column indicates the number of pages in the book. As you can see, the result set is in ascending order by number of pages. Now you can describe how to sort the result set by either ascending or descending order, and explain how to indicate which column to use for the sorting order. Thanks for watching this video.

Grouping Result Sets

Hello and welcome to Grouping Select Statement Result Sets. In this video, we will learn about some advanced techniques in retrieving data from a relational database table, and sorting, and grouping how the results set displays. At the end of this lesson, you will be able to explain how to eliminate duplicates from a result set and describe how to further restrict a result set. At times, a select statement result set can contain duplicate values. Based on our simplified library database model, in the author table example, the country column lists the two-letter country code of the author's country. If we select just the country column, we get a list of all of the countries. For example, select country from author order by 1. The order by clause sorts the result set. This result set lists the countries the authors belong to, sorted alphabetically by country. In this case, the result set displays 20 rows, one row for each of the 20 authors. But some of the authors come from the same country, so the result set contains duplicates. However, all we need is a list of countries the authors come from. So in this case, duplicates do not make sense. To eliminate duplicates, we use the keyword distinct. Using the keyword "distinct" reduces the result set to just six rows. But what if we wanted to also know how many authors come from the same country? So now we know that the 20 authors come from six different countries. But we might want to also know how many authors come from the same country. To display the result set listing the country and number of authors that come from that country, we add the "group by" clause to the select statement. The "group by" clause groups a result into subsets that has matching values for one or more columns. In this example, countries are grouped and then counted using the count function. Notice the column heading for the second column and the result set. The numeric value "2" displays as a column name because the column name is not directly available in the table. The second column in the result set was calculated by the count function. Instead of using the column named "2," we can assign a column name to the result set. We do this using the "as" keyword. In this example, we change the derived column name "2" to column name "Count" using the "as count" keyword. This helps clarify the meaning of the result set. Now that we have the count of authors from different countries, we can further restrict the number of rows by passing some conditions. For example, we can check if there are more than four authors from the same country. To set a condition to a "group by" clause, we use the keyword "having". The "having" clause is used in combination with the "group by" clause. It is very important to note that the "where" clause is for the entire result set, but the "having" clause works only with the "group by" clause. To check if there are more than four authors from the same country, we add the following to the select statement, having count country greater than four. Only countries that have five or more authors from that country are listed in the result set. In this example, those countries are China with six authors and India, also with six authors. Now you can explain how to eliminate duplicates from a result set and describe how to further restrict a result set. Thanks for watching this video.

Summary & Highlights

Congratulations! You have completed this lesson. At this point in the course, you know:

You can use the WHERE clause to refine your query results.

You can use the wildcard character (%) as a substitute for unknown characters in a pattern.

You can use BETWEEN ... AND ... to specify a range of numbers.

You can sort query results into ascending or descending order, using the ORDER BY clause to specify the column to sort on.

You can group query results by using the GROUP BY clause. 
