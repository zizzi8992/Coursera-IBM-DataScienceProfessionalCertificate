Views

Welcome to Views. After watching this video, you will be able to: Define a view Describe when to use a view Explain the syntax for creating a view A view is an alternative way of representing data that exists in one or more tables or views. A view can include all or some of the columns from one or more base tables or existing views. Creating a view creates a named specification of a results table, which can be queried in the same way as a table. You can also change the data in the base table by running insert, update, and delete queries against the view. When you define a view, the definition of the view is stored. The data that the view represents is stored in the base tables, not by the view itself. You can use a view to: Show a selection of data for a given table, so you can omit sensitive data like tax information, birth dates, or salaries. Combine two or more tables in meaningful ways. Simplify access to data by granting access to a view without granting access to the underlying tables. Show only the portions of data relevant to the process that uses the view. For example, you can create a view that displays only non-sensitive data from the Employees table; Employee ID, name, address, job ID, manager ID, and department ID. The view does not show sensitive data like salary or birthdate. You use the CREATE VIEW statement to create a view based on one or more tables or views. To define a view, use the CREATE VIEW statement and assign a name (up to 128 characters in length) to the view. List the columns that you want to include. You can use an alias to name the columns if you wish. Use the AS SELECT clause to specify the columns in the view, and the FROM clause to specify the base table name. You can also add an optional WHERE clause to refine the rows in the view. This CREATE VIEW statement <click> creates a view called EMPINFO based on the Employees table. The SELECT statement returns the data in the view, as shown in the table below. Views are dynamic; they consist of the data that would be returned from the SELECT statement used to create them. When you use a view in another SQL statement, it behaves as though you have used a SELECT statement that returns the content of the view. The SELECT statement that you use to create the view can name other views and tables, and it can use the WHERE, GROUP BY, and HAVING clauses. It cannot use the ORDER BY clause or name a host variable. In this example the EMPINFO view is created with only the rows where the MANAGER_ID is 30002. You can use a SELECT statement to show the information from the view, and verify that only rows where the MANAGER_ID is 30002 are included. If you need to remove a view completely, <click> you can use DROP VIEW. In this video, you learned that: Views are an alternate way of accessing data in tables. They can include specified columns from multiple base tables and existing views. Once created, views can be queried like a table, and the data in the base table can be modified through the view. Views are dynamic; only the definition of the view is stored, not the data. You can use the CREATE VIEW statement to create a view based on one or more tables or existing views.

Stored Procedures

Welcome to Stored Procedures. After watching this video, you will be able to: Explain what a stored procedure is List the benefits of using stored procedures Describe how to create and use a stored procedure A stored procedure is a set of SQL statements that are stored and executed on the database server. So instead of sending multiple SQL statements from the client to server, you encapsulate them in a stored procedure on the server and send one statement from the client to execute them. You can write stored procedures in many different languages. For example, for Db2 on Cloud and DB2 you can write in SQL PL, PL/SQL, Java, C, or other languages. They can accept information as parameters, perform create, read, update, and delete (CRUD) operations, and return results to the client application. The benefits of stored procedures include: Reduction in network traffic because only one call is needed to execute multiple statements. Improvement in performance because the processing happens on the server where the data is stored, with just the final result being passed back to the client. Reuse of code because multiple applications can use the same stored procedure for the same job. Increase in security because a) you do not need to expose all of your table and column information to client-side developers and b) you can use server-side logic to validate data before accepting it into the system. Remember though, that SQL is not a fully-fledged programming language, so you should not try to write all of your business logic in your stored procedures. So let’s look how to create a stored procedure on Db2 on Cloud in SQL. Firstly, you use the CREATE PROCEDURE statement, specifying the name of the procedure and any parameters which it will take. In this example, the UPDATE_SAL procedure will take an employee number and a rating which it will use to update an employee’s salary by an amount depending on their rating. Then you declare the language you are using. You then enclose your procedural logic in the BEGIN END statements. In this case, giving employees who have a rating of 1 a 10% pay rise and all others, a 5% pay rise. Notice that you can use the information passed to the procedure, the parameters, directly in your procedural logic. You can call stored procedures from your external applications or from dynamic SQL statements. To call the UPDATE_SAL stored procedure that we just created, you use the CALL statement with the name of the stored procedure and pass the required parameters – in this case, the employee id and the rating for that employee. In this video, you learned that: Stored procedures are a set of SQL statements that execute on the server Stored procedures offer many benefits over sending SQL statements to the server You can use stored procedures in dynamic SQL statements and external applications

ACID Transactions

Welcome to ACID transactions. After watching this video, you will be able to: Explain what an ACID transaction is Give an example of an ACID transaction Describe commits and rollbacks A transaction is an indivisible unit of work. It can consist of one or more SQL statements, but to be considered successful, either all of those SQL statements must complete successfully, leaving the database in a new stable state, or none must complete, leaving the database as it was before the transaction began. For example, if you make a purchase using your bank card, many things must happen: The product must be added to your cart Your payment must be processed - Your account must be debited the correct amount and the store's account credited The inventory for that product must be reduced by the number purchased Let's look at the example in more detail. If Rose buys boots for $200, then you can use an UPDATE statement to decrease her account balance. And another UDATE statement to add $200 to the Shoe Shop balance. And a final update statement to decrease the stock level of boots at the Shoe Shop by 1. If any of these UPDATE statements fail, the whole transaction should fail, to keep the data in a consistent state. The types of transaction in the example are called ACID transactions. Atomic - All changes must be performed successfully or not at all. Consistent - Data must be in a consistent state before and after the transaction. Isolated - No other process can change the data while the transaction is running. Durable - The changes made by the transaction must persist. To start an ACID transaction, use the command BEGIN. In db2 on Cloud, this command is implicit. Any commands you issue after that are part of the transaction, until you issue either COMMIT, or ROLLBACK. If all the commands complete successfully, issue a commit command to save everything in the database to a consistent, stable state. If any of the commands fail; perhaps Rose’s account doesn’t have enough money to make the payment, you can issue a rollback command to undo all the changes and leave the database in its previously consistent stable state. SQL statements can be called from languages like Java, C, R, and Python. This requires the use of database-specific access APIs such as Java Database Connectivity (JDBC) for Java or a specific database connector like ibm_db for Python. Most languages use the EXEC SQL commands to initiate a SQL command, including COMMIT and ROLLBACK, as you can see in this example. Remember that BEGIN is implicit, you do not need to call it out explicitly. Incorporating SQL commands into your application code gives you the opportunity to create error-checking routines that in turn control whether the transaction is committed or rolled back. In this video, you learned that: A transaction represents a complete unit of work, which can be one or more SQL statements. An ACID transaction is one where all the SQL statements must complete successfully or none at all. This ensures the database is always in a consistent state. ACID stands for Atomic, Consistent, Isolated, Durable. SQL commands BEGIN, COMMIT, and ROLLBACK are used to manage ACID transactions. SQL commands can be called from languages like C, R and Python.

Summary & Highlights

Congratulations! You have completed this lesson. At this point in the course, you know:

Views are a dynamic mechanism for presenting data from one or more tables.A transaction represents a complete unit of work, which can be one or more SQL statements.

An ACID transaction is one where all the SQL statements must complete successfully, or none at all.

A stored procedure is a set of SQL statements that are stored and executed on the database server, allowing you to send one statement as an alternative to sending multiple statements.

You can write stored procedures in many different languages like SQL PL, PL/SQL, Java, and C.