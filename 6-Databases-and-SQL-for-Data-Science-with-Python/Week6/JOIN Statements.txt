Join Overview

Hello and welcome to Join Overview. After watching this video, you will be able to: Define the join operator Explain the role of primary keys and foreign keys in a join operation List different types of join operators A simple Select statement retrieves data from one or more columns from a single table. The next level of complexity is retrieving data from two or more tables. This leads to multiple possibilities of how the result set can be generated. To combine data from two tables, you use the JOIN operator. A JOIN combines the rows from two or more tables based on a relationship between certain columns in these tables. In this simplified library database example, author and book are entities. This entity relationship diagram represents the relational data model for the author and book entity as well as other entities such as borrower, loan, copy, and author list. The information is split into different tables. If you wanted to know which borrower has which copy of a book out on loan, you need to gather data from three tables: the borrower, loan, and copy tables. This is when you need to use the JOIN operator. First you need to identify the relationship between these tables. That is, the column or columns in each table to use as a link between the tables. In this entity relationship diagram, notice the author ID, book ID, borrower ID, and copy ID have the primary key icon. A primary key uniquely identifies each row in a table. Notice also the entities on the lower half of the screen some attributes have FK in brackets next to them. This identifies a foreign key, which is a set of columns referring to a primary key of another entity.For example, the loan entity has the borrower ID attribute with the FK in brackets. In this example, the borrower ID attribute is the Foreign Key in the loan entity, which refers to the Primary Key for the borrower entity. So, if you wanted to know which borrower has a book out on loan, you need to gather data from the borrower and loan tables.You will need the borrower ID from both tables. So far, you have seen an example of combining two tables. But what if you need to combine data from three or more different tables? You simply add new tables to the joins. For example, if you want to know which borrowers have a book on loan, and which copy of the book they have on loan, first you join the information from the borrower table and the loan table by matching borrower IDs. Then, you join the information from the loan table and the copy table by matching the copy IDs. SQL offers you several different types of JOINs. You can extract a data set corresponding to the intersection of the two tables involved, or you can choose a bigger data set. You can go up to the point of selecting the combination of all the data from these two tables. The most common type of join is an inner join, which displays only the rows from two tables that have matching value in a common column, usually the primary key of one table that exists as a foreign key in the second table. There are also outer joins, which return matching rows, and even the rows from one or the other table that don’t match. There are many varieties of outer join that you can use to refine your result set. In this video, you learned that: You can use the JOIN operator to combine rows from two or more tables The tables being joined are related by a common column, which is usually the primary key of one table, and appears as a foreign key in the other table There are two types of joins; inner joins and outer joins.

Inner Join

A join operation combines the rows from two or more tables based on a relationship between certain columns in these tables. There are two types of table joins: inner joins and outer joins. The most common type of join is an inner join, which displays only the rows from two tables that have matching value in a common column, usually the primary key of one table that exists as a foreign key in the second table. This is the syntax of the select statement for an inner join. Imagine you want to retrieve a list of all people who are borrowing books, and the date of the loan. You need data from the borrower table and the loan table. In the FROM clause, you specify the join between the borrower table and the loan table as BORROWER INNER JOIN LOAN. You identify the borrower table as B, and the loan table as L. The table specified on the left of the JOIN clause is known as the left table – in this case, the borrower table is the left table. For this join, you select borrower ID, last name, and country from the borrower table, and the borrower ID and the loan date from the loan table. In the ON clause, you specify the JOIN predicate, in this case the condition that the borrower ID in the borrower table is equal to the borrower ID in the loan table. Notice that in this join each column name is prefixed with either the letter B or L. In SQL, this is referred to as an alias. Using an alias is much easier than rewriting the whole table name. The result set shows only the rows from both tables that have the same borrower ID. The rows are displayed if they Borrower_Id matches. Rows with Borrower_IDs that do not match are not displayed. The Borrower_Id, Lastname, and Country columns are taken from the Borrower table and joined to the Borrower_Id and Loan_Date columns from the Loan table to make the result set. In this video, you learned that: Inner joins return only the rows from the tables that have matching value in a common column, usually the primary key of one table that exists as a foreign key in the second table. Rows from joined tables that do not have a matching value do not appear in the result.
: Added to Selection. Press [CTRL + S] to save as a note

Outer Joins

Welcome to Outer Join. After watching this video, you will be able to: Describe left outer joins, right outer joins, and full outer joins Explain when to use each type of outer join Describe the syntax of the OUTER JOIN statement Outer joins, like inner joins, return the rows from each table that have matching values in the join columns. Unlike inner joins, outer joins also return the rows that do not have a match between the tables. SQL offers you three types of outer joins: left outer join, right outer join and full outer join. In a left outer join, all the rows from the first table (on the left side of the join predicate) are included, and only the matching rows from the second table (on the right side of the join predicate). In this diagram, a Left Join matches all the rows from the left table and combines the information with rows from the right table that match the criteria specified in the query. In a right outer join, all the rows from the first table (on the left side of the join predicate) are included, and only the matching rows from the second table (on the right side of the join predicate). In this diagram, a Right Join matches all the rows from the right table and combines the information with rows from the left table that match the criteria specified in the query. A full join returns all rows from both the right table and the left table. So, the FULL JOIN can return a very large result set. In this diagram, the result set of a RIGHT JOIN is all rows from both tables matching the criteria specified in the query, plus all non-matching rows from the RIGHT table. This is the syntax of the SELECT statement for a LEFT JOIN. In this example, the Borrower table is the first table specified in the FROM clause of the SELECT statement, so the Borrower table is the LEFT table, and the Loan table is the RIGHT table.

In the FROM clause, Borrower is listed on the left side of the join operator, therefore you will select all rows from the Borrower table and combine them with the contents of the Loan table based on the criteria specified in the query. In this example, the criteria is the BORROWER ID column. For a LEFT OUTER JOIN, simply called a LEFT JOIN, you will select the following columns from the Borrower table: BorrowerID, LastName, and Country, and you will also select the following columns from the Loan table: BorrowerID, and LoanDate. The LEFT JOIN selects each BORROWER ID in the Borrower table and displays the LoanDate from the Loan table. The result set shows each Borrower ID from the borrower table, and the loan date for that borrower. There is no loan date for the last three rows, so the borrower ID and loan date show null values. This is the syntax of the SELECT statement for a RIGHT JOIN. In this example, the Borrower table is the first table specified in the FROM clause of the SELECT statement, so the Borrower table is the LEFT table, and the Loan table is the RIGHT table.

In the FROM clause, the Loan table is listed on the right side of the join operator, therefore you will select all rows from the Loan table and combine them with the contents of the Borrower table based on the criteria specified in the query. In this example, the criteria is the BORROWER_ID column. For a RIGHT JOIN, you will select the following columns from the Loan table: Borrower_ID, and LoanDate, and you will also select the following columns from the Borrower table: Borrower_ID, LastName, and Country where the Borrower_ID in the Loan table matches the Borrower_ID in the Borrower table. The result set shows each Borrower ID from the Loan table and the Loan Date for that Borrower, where the Borrower ID in the Loan table also exists in the Borrower table. For the last row, there is no matching row in the borrower table, so the Borrower_ID, Lastname, and Country show null values. This could indicate a problem for the library; it indicates there is a book on loan to an unknown person. This is the syntax of the SELECT statement for a FULL JOIN. For a FULL JOIN, you select all rows from the Borrower table and all rows from the Loan table. The result set shows all eight records from the Borrower table listed with the corresponding data from the Loan table. Once again, three rows return a NULL value because Borrowers Peters, Li, and Wong have never taken a book out on loan. The last row returns values for Borrower_ID and Loan_Date from the Laon table, but returns NULLs from the Borrower table. In this instance, there is no match in the Borrower table – the borrower of this book is unknown. In this video, you learned that: There are many varieties of outer join that you can use to refine your result set. Left outer joins return all rows from the left table, and all the rows form the right table that match that an inner join would return and all the rows in the first table that do not have a match in the second table. Right outer joins return all the rows that an inner join would return and all the rows in the second table that do not have a match in the first table. Full outer joins return all matching rows from both tables and all the rows from both tables that don’t have a match.

Summary & Highlights

Congratulations! You have completed this lesson. At this point in the course, you know:

A join combines the rows from two or more tables based on a relationship between certain columns in these tables.

To combine data from three or more different tables, you simply add new joins to the SQL statement. 

There are two types of table joins: inner join and outer join; and three types of outer joins: left outer join, right outer join, and full outer join. 

The most common type of join is the inner join, which matches the results from two tables and returns only the rows that match.

You can use an alias as shorthand for a table or column name.

You can use a self-join to compare rows within the same table.